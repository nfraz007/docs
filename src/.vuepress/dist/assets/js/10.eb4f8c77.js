(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{365:function(t,a,e){"use strict";e.r(a);var s=e(26),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"unit-converter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit-converter"}},[t._v("#")]),t._v(" Unit Converter")]),t._v(" "),e("p",[t._v("An easy to use PHP unit conversion library.")]),t._v(" "),e("p",[t._v("Converter allows you to convert any unit to any other compatible unit type. It has no external dependencies, simply include the library in your project and you're away!")]),t._v(" "),e("h2",{attrs:{id:"features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),e("p",[t._v("Convertor can handle a wide range of unit types including:")]),t._v(" "),e("ul",[e("li",[t._v("Length")]),t._v(" "),e("li",[t._v("Area")]),t._v(" "),e("li",[t._v("Volume")]),t._v(" "),e("li",[t._v("Mass")]),t._v(" "),e("li",[t._v("Speed")]),t._v(" "),e("li",[t._v("Time")]),t._v(" "),e("li",[t._v("Plane Angle")]),t._v(" "),e("li",[t._v("Pressure")]),t._v(" "),e("li",[t._v("Energy")]),t._v(" "),e("li",[t._v("Storage")]),t._v(" "),e("li",[t._v("Frequency")])]),t._v(" "),e("p",[t._v("If you need additional unit types, then it is easy to add your own.")]),t._v(" "),e("h2",{attrs:{id:"setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" Setup")]),t._v(" "),e("p",[t._v("Setting up Convertor could not be simpler.")]),t._v(" "),e("p",[t._v("Include the library is very easy")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"UnitConverter.php"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"simple-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-example"}},[t._v("#")]),t._v(" Simple Example")]),t._v(" "),e("p",[t._v("Once you have included the UnitConverter.php library.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"km"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"ft"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//returns converted value")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Km "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6561.6797900262")]),t._v(" Ft\n")])])]),e("h2",{attrs:{id:"convert-a-unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-a-unit"}},[t._v("#")]),t._v(" Convert a Unit")]),t._v(" "),e("p",[t._v("To convert a unit, create an instance of UnitConverter class. you can then call the convert() function on the UnitConverter object, passing three values as "),e("em",[t._v("number")]),t._v(", "),e("em",[t._v("from")]),t._v(", "),e("em",[t._v("to")]),t._v(" which is")]),t._v(" "),e("p",[t._v("number: the integer/decimal value which is going to be converted")]),t._v(" "),e("p",[t._v("from: initial unit")]),t._v(" "),e("p",[t._v("to: final unit in which the number you want to convert")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"km"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"ft"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("2 Km = 6561.6797900262 Ft")])]),t._v(" "),e("h2",{attrs:{id:"get-list-particular-unit-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-list-particular-unit-data"}},[t._v("#")]),t._v(" Get list/particular Unit data")]),t._v(" "),e("p",[t._v("You can get the list of unit data with just one function. The "),e("strong",[t._v("getUnit()")]),t._v(" function return all the unit data. if you want to see the particular unit then pass the unit as a parameter to this function.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("Output will be a JSON string")])]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"km"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v('{"name":"kilometer", "base":"m", "factor":1000}')])]),t._v(" "),e("h2",{attrs:{id:"adding-insert-custom-unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-insert-custom-unit"}},[t._v("#")]),t._v(" Adding/Insert custom unit")]),t._v(" "),e("p",[t._v("If you want to add a custom unit then it is also very easy. This can be done using the function "),e("strong",[t._v("putUnit()")]),t._v(". This function take four argument as "),e("strong",[t._v("unit")]),t._v(", "),e("strong",[t._v("name")]),t._v(", "),e("strong",[t._v("base")]),t._v(", "),e("strong",[t._v("factor")]),t._v(". all data must be not null and the unit need not be present in the existing unit array. "),e("strong",[t._v("factor")]),t._v(" must be an integer/decimal value and not be equal to zero.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("putUnit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"neo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"m"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("It will add this unit to the unit array.")]),t._v(" "),e("h2",{attrs:{id:"edit-update-existing-unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#edit-update-existing-unit"}},[t._v("#")]),t._v(" Edit/Update existing unit")]),t._v(" "),e("p",[t._v("If you want to modify the existing factor value of a certain unit, then it is also a very easy task. Just call a function setUnit() and it will do the rest of things for you. This function takes two parameters as "),e("strong",[t._v("unit")]),t._v(" and "),e("strong",[t._v("factor")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnitConverter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$obj")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUnit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"km"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("It will modify the factor value of "),e("strong",[t._v("km")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"available-units"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#available-units"}},[t._v("#")]),t._v(" Available Units")]),t._v(" "),e("p",[t._v("UnitConverter comes with a large number of standard units build in. this section details all of these units by category.")]),t._v(" "),e("p",[t._v("The base unit for each category is highlighted in bold.")]),t._v(" "),e("h3",{attrs:{id:"length"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[t._v("#")]),t._v(" Length")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("m - meter")])]),t._v(" "),e("li",[t._v("km - kilometer")]),t._v(" "),e("li",[t._v("dm - decimeter")]),t._v(" "),e("li",[t._v("cm - centimeter")]),t._v(" "),e("li",[t._v("mm - milimeter")]),t._v(" "),e("li",[t._v("μm - micrometer")]),t._v(" "),e("li",[t._v("nm - nanometer")]),t._v(" "),e("li",[t._v("pm - picometer")]),t._v(" "),e("li",[t._v("nmi - nautical mile")]),t._v(" "),e("li",[t._v("mi - mile")]),t._v(" "),e("li",[t._v("fur - femara")]),t._v(" "),e("li",[t._v("fm - fathom")]),t._v(" "),e("li",[t._v("yd - yard")]),t._v(" "),e("li",[t._v("ft - foot")]),t._v(" "),e("li",[t._v("in - inch")]),t._v(" "),e("li",[t._v("hd - hand")]),t._v(" "),e("li",[t._v("ld - lunar distance")]),t._v(" "),e("li",[t._v("au - astronomical unit")]),t._v(" "),e("li",[t._v("ly - lightyear")]),t._v(" "),e("li",[t._v("pc - parsec")])]),t._v(" "),e("h3",{attrs:{id:"area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#area"}},[t._v("#")]),t._v(" Area")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("m2 - meter square")])]),t._v(" "),e("li",[t._v("km2 - kilometer square")]),t._v(" "),e("li",[t._v("ha - hectare")]),t._v(" "),e("li",[t._v("are - are")]),t._v(" "),e("li",[t._v("dm2 - decimeter square")]),t._v(" "),e("li",[t._v("cm2 - centimeter square")]),t._v(" "),e("li",[t._v("mm2 - milimeter square")]),t._v(" "),e("li",[t._v("μm2 - micron square")]),t._v(" "),e("li",[t._v("ac - acre")]),t._v(" "),e("li",[t._v("mi2 - mile square")]),t._v(" "),e("li",[t._v("yd2 - yard square")]),t._v(" "),e("li",[t._v("ft2 - foot square")]),t._v(" "),e("li",[t._v("in2 - inch square")]),t._v(" "),e("li",[t._v("rd2 - rod")])]),t._v(" "),e("h3",{attrs:{id:"volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[t._v("#")]),t._v(" Volume")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("m3 - meter cube")])]),t._v(" "),e("li",[t._v("dm3 - decimeter cube")]),t._v(" "),e("li",[t._v("cm3 - centimeter cube")]),t._v(" "),e("li",[t._v("mm3 - milimeter cube")]),t._v(" "),e("li",[t._v("hl - hectolitre")]),t._v(" "),e("li",[t._v("l - litre")]),t._v(" "),e("li",[t._v("dl - decilitre")]),t._v(" "),e("li",[t._v("cl - centilitre")]),t._v(" "),e("li",[t._v("ml - mililitre")]),t._v(" "),e("li",[t._v("ft3 - foot cube")]),t._v(" "),e("li",[t._v("in3 - inch cube")]),t._v(" "),e("li",[t._v("yd3 - yard cube")]),t._v(" "),e("li",[t._v("af3 - acre cube")]),t._v(" "),e("li",[t._v("pt - pint")]),t._v(" "),e("li",[t._v("gal - gallon")])]),t._v(" "),e("h3",{attrs:{id:"mass"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mass"}},[t._v("#")]),t._v(" Mass")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("kg - kilogram")])]),t._v(" "),e("li",[t._v("t - metric ton")]),t._v(" "),e("li",[t._v("g - gram")]),t._v(" "),e("li",[t._v("mg - miligram")]),t._v(" "),e("li",[t._v("μg - microgram")]),t._v(" "),e("li",[t._v("q - quintal")]),t._v(" "),e("li",[t._v("lb - pound")]),t._v(" "),e("li",[t._v("oz - ounce")]),t._v(" "),e("li",[t._v("ct - carat")]),t._v(" "),e("li",[t._v("gr - grain")]),t._v(" "),e("li",[t._v("lt - long ton")]),t._v(" "),e("li",[t._v("st - short ton")]),t._v(" "),e("li",[t._v("kwt - UK hundred weight")]),t._v(" "),e("li",[t._v("swt - US hundred weight")]),t._v(" "),e("li",[t._v("st - UK stone")]),t._v(" "),e("li",[t._v("N - Newton")])]),t._v(" "),e("h3",{attrs:{id:"speed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#speed"}},[t._v("#")]),t._v(" Speed")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("mps - meter per second")])]),t._v(" "),e("li",[t._v("kph - kilometer per hour")]),t._v(" "),e("li",[t._v("kps - kilometer per second")]),t._v(" "),e("li",[t._v("mph - mile per hour")]),t._v(" "),e("li",[t._v("C - lightspeed")]),t._v(" "),e("li",[t._v("ma - mach")]),t._v(" "),e("li",[t._v("kn - knot")]),t._v(" "),e("li",[t._v("fps - foot per hour")]),t._v(" "),e("li",[t._v("ips - inch per hour")])]),t._v(" "),e("h3",{attrs:{id:"time"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#time"}},[t._v("#")]),t._v(" Time")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("s - second")])]),t._v(" "),e("li",[t._v("y - year")]),t._v(" "),e("li",[t._v("mth - month")]),t._v(" "),e("li",[t._v("wk - week")]),t._v(" "),e("li",[t._v("d - day")]),t._v(" "),e("li",[t._v("h - hour")]),t._v(" "),e("li",[t._v("min - minute")]),t._v(" "),e("li",[t._v("ms - milisecond")]),t._v(" "),e("li",[t._v("μs - microsecond")]),t._v(" "),e("li",[t._v("ns - nanosecond")]),t._v(" "),e("li",[t._v("ps - picosecond")])]),t._v(" "),e("h3",{attrs:{id:"plane-angle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plane-angle"}},[t._v("#")]),t._v(" Plane Angle")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("deg - degree")])]),t._v(" "),e("li",[t._v("rad - radian")]),t._v(" "),e("li",[t._v("gad - gradian")]),t._v(" "),e("li",[t._v("mrad - milliradian")]),t._v(" "),e("li",[t._v("sa - second of arc")])]),t._v(" "),e("h3",{attrs:{id:"pressure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pressure"}},[t._v("#")]),t._v(" Pressure")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("pa - pascal")])]),t._v(" "),e("li",[t._v("kpa - kilopascal")]),t._v(" "),e("li",[t._v("mpa - megapascal")]),t._v(" "),e("li",[t._v("bar - bar")]),t._v(" "),e("li",[t._v("mbar - milibar")]),t._v(" "),e("li",[t._v("psi - pound - force per square inch")]),t._v(" "),e("li",[t._v("tor - torr")])]),t._v(" "),e("h3",{attrs:{id:"energy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#energy"}},[t._v("#")]),t._v(" Energy")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("j - joule")])]),t._v(" "),e("li",[t._v("kj - kilojoule")]),t._v(" "),e("li",[t._v("mj - megajoule")]),t._v(" "),e("li",[t._v("cal - calorie")]),t._v(" "),e("li",[t._v("whr - watt hour")]),t._v(" "),e("li",[t._v("kwhr - kilowatt hour")]),t._v(" "),e("li",[t._v("mwhr - megawatt hour")]),t._v(" "),e("li",[t._v("mev - mega electron volt")]),t._v(" "),e("li",[t._v("tu - british thermal unit")]),t._v(" "),e("li",[t._v("Nm - newton meter")]),t._v(" "),e("li",[t._v("ftlb - foot pound")])]),t._v(" "),e("h3",{attrs:{id:"data-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-storage"}},[t._v("#")]),t._v(" Data Storage")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("b - bit")])])]),t._v(" "),e("li",[e("p",[t._v("kb - kilobit")])]),t._v(" "),e("li",[e("p",[t._v("kbb - kibibit")])]),t._v(" "),e("li",[e("p",[t._v("mb - megabit")])]),t._v(" "),e("li",[e("p",[t._v("mbb - mebibit")])]),t._v(" "),e("li",[e("p",[t._v("gb - gegabit")])]),t._v(" "),e("li",[e("p",[t._v("gbb - gebibit")])]),t._v(" "),e("li",[e("p",[t._v("tb - terabit")])]),t._v(" "),e("li",[e("p",[t._v("tbb - tebibit")])]),t._v(" "),e("li",[e("p",[t._v("pb - petabit")])]),t._v(" "),e("li",[e("p",[t._v("pbb - pebibit")])]),t._v(" "),e("li",[e("p",[t._v("B -byte")])]),t._v(" "),e("li",[e("p",[t._v("KB - kilobyte")])]),t._v(" "),e("li",[e("p",[t._v("KBB - kibibyte")])]),t._v(" "),e("li",[e("p",[t._v("MB - megabyte")])]),t._v(" "),e("li",[e("p",[t._v("MBB - mebinyte")])]),t._v(" "),e("li",[e("p",[t._v("GB - gegabyte")])]),t._v(" "),e("li",[e("p",[t._v("GBB - gebibyte")])]),t._v(" "),e("li",[e("p",[t._v("TB - terabyte")])]),t._v(" "),e("li",[e("p",[t._v("TBB - tebibyte")])]),t._v(" "),e("li",[e("p",[t._v("PB - petabyte")])]),t._v(" "),e("li",[e("p",[t._v("PBB - pebibyte")])])]),t._v(" "),e("h3",{attrs:{id:"frequency"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frequency"}},[t._v("#")]),t._v(" Frequency")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("hz - hertz")])]),t._v(" "),e("li",[t._v("khz - kilohertz")]),t._v(" "),e("li",[t._v("mhz - megahertz")]),t._v(" "),e("li",[t._v("ghz - gigahertz")])])])}),[],!1,null,null,null);a.default=r.exports}}]);